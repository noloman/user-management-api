spring:
  application:
    name: UserManagement
  
  # Unified database configuration (works for both Docker and local development)
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/usermanagement_dev}
    username: ${SPRING_DATASOURCE_USERNAME:userapp}
    password: ${SPRING_DATASOURCE_PASSWORD:userapp123}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 30000

  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: ${FORMAT_SQL:false}
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true

  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}

  # Unified email configuration
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_STARTTLS:false}
        debug: ${MAIL_DEBUG:false}

# Server configuration
server:
  port: ${SERVER_PORT:8082}
  servlet:
    context-path: /

# Logging configuration
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    me.manulorenzo.usermanagement: ${LOG_LEVEL_APP:DEBUG}
    org.springframework.security: ${LOG_LEVEL_SECURITY:WARN}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: ${LOG_FILE_PATH:/app/logs/usermanagement.log}
    max-size: 100MB
    max-history: 30

# OpenAPI/Swagger configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
    filter: false
    displayRequestDuration: true
    displayOperationId: false
    defaultModelsExpandDepth: 2
    defaultModelExpandDepth: 2
  show-actuator: false
  writer-with-default-pretty-printer: true

# Production-ready health monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized
  info:
    env:
      enabled: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:default-secret-key-change-in-production-and-make-it-longer-than-32-chars}
  access-token:
    expiration-ms: ${JWT_ACCESS_TOKEN_EXPIRATION:900000} # 15 minutes
  refresh-token:
    expiration-ms: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000} # 7 days

# Application-specific configuration
app:
  roles:
    admin: ${APP_ADMIN_ROLE:ADMIN}
    user: ${APP_USER_ROLE:USER}
  security:
    first-user-admin: ${APP_FIRST_USER_ADMIN:true}
  email:
    from: ${APP_EMAIL_FROM:noreply@usermanagement.com}
  base-url: ${APP_BASE_URL:http://localhost:8082}
